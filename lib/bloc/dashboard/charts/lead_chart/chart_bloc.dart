import 'dart:io';
import 'package:crm_task_manager/bloc/dashboard/charts/lead_chart/chart_event.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/lead_chart/chart_state.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:crm_task_manager/api/service/api_service.dart';
import 'package:crm_task_manager/models/dashboard_charts_models/lead_chart_model.dart';
import 'package:crm_task_manager/screens/dashboard/CACHE/lead_chart_cache.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–µ—à–∞

class DashboardChartBloc extends Bloc<DashboardChartEvent, DashboardChartState> {
  final ApiService _apiService;

  DashboardChartBloc(this._apiService) : super(DashboardChartInitial()) {
    on<LoadLeadChartData>(_onLoadLeadChartData);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  Future<bool> _checkInternetConnection() async {
    try {
      final result = await InternetAddress.lookup('example.com');
      return result.isNotEmpty && result[0].rawAddress.isNotEmpty;
    } on SocketException {
      return false;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ª–∏–¥–æ–≤
  Future<void> _onLoadLeadChartData(
    LoadLeadChartData event,
    Emitter<DashboardChartState> emit,
  ) async {
    try {
      emit(DashboardChartLoading());

      // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      List<ChartData>? cachedData = await LeadChartCacheHandler.getLeadChartData();

      if (cachedData != null) {
        print("üì¶ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –∫–µ—à–µ.");
        emit(DashboardChartLoaded(chartData: cachedData));
      }

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
      if (await _checkInternetConnection()) {
        print("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...");
        final chartData = await _apiService.getLeadChart();

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ —Ä–∞–≤–Ω—ã null –∏–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ UI
        if (cachedData == null || !_areChartDataEqual(chartData, cachedData)) {
          print("‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ UI.");

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
          await LeadChartCacheHandler.saveLeadChartData(chartData);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ UI
          emit(DashboardChartLoaded(chartData: chartData));
        } else {
          print("üîÑ –ö–õ–ò–ï–ù–¢–´ –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
        }
      } else {
        print("üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.");
        if (cachedData == null) {
          emit(DashboardChartError(message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."));
        }
      }
    } catch (e) {
      emit(DashboardChartError(message: e.toString()));
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
  bool _areChartDataEqual(List<ChartData> a, List<ChartData> b) {
    if (a.length != b.length) return false;
    for (int i = 0; i < a.length; i++) {
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º label, data (—Å–ø–∏—Å–∫–∏) –∏ color
      if (a[i].label != b[i].label || 
          !_areDataListsEqual(a[i].data, b[i].data) || 
          a[i].color != b[i].color) {
        return false;
      }
    }
    return true;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö (List<double>)
  bool _areDataListsEqual(List<double> a, List<double> b) {
    if (a.length != b.length) return false;
    for (int i = 0; i < a.length; i++) {
      if (a[i] != b[i]) return false;
    }
    return true;
  }
}
