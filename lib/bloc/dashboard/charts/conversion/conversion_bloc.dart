import 'dart:io';

import 'package:crm_task_manager/api/service/api_service.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/conversion/conversion_event.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/conversion/conversion_state.dart';
import 'package:crm_task_manager/models/dashboard_charts_models/lead_conversion_model.dart';
import 'package:crm_task_manager/screens/dashboard/CACHE/lead_conversion_cache.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class DashboardConversionBloc
    extends Bloc<DashboardConversionEvent, DashboardConversionState> {
  final ApiService _apiService;

  DashboardConversionBloc(this._apiService)
      : super(DashboardConversionInitial()) {
    on<LoadLeadConversionData>(_onLoadLeadConversionData);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  Future<bool> _checkInternetConnection() async {
    try {
      final result = await InternetAddress.lookup('example.com');
      return result.isNotEmpty && result[0].rawAddress.isNotEmpty;
    } on SocketException {
      return false;
    }
  }

Future<void> _onLoadLeadConversionData(
  LoadLeadConversionData event,
  Emitter<DashboardConversionState> emit,
) async {
  try {
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ª–∏–¥–æ–≤...");
    emit(DashboardConversionLoading());

    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    List<double>? cachedData = await CacheHandler.getLeadConversionData();

    if (cachedData != null) {
      print("üì¶ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ: ${cachedData.length} –º–µ—Å—è—Ü–µ–≤.");
      emit(DashboardConversionLoaded(
        leadConversionData: LeadConversion(monthlyData: cachedData),
      ));
    }

    // 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    if (await _checkInternetConnection()) {
      print("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...");

      final leadConversionData = await _apiService.getLeadConversionData();

      if (cachedData == null || 
          !_areListsEqual(leadConversionData.monthlyData, cachedData)) {
        print("‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ UI.");

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
        await CacheHandler.saveLeadConversionData(leadConversionData.monthlyData);

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        emit(DashboardConversionLoaded(leadConversionData: leadConversionData));
      } else {
        print("üîÑ –ö–û–ù–í–ï–†–°–ò–Ø –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
      }
    } else {
      print("üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.");
      if (cachedData == null) {
        emit(DashboardConversionError(
          message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
        ));
      }
    }
  } catch (e) {
    print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $e");
    emit(DashboardConversionError(message: e.toString()));
  }
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
bool _areListsEqual(List<double> a, List<double> b) {
  if (a.length != b.length) return false;
  for (int i = 0; i < a.length; i++) {
    if (a[i] != b[i]) return false;
  }
  return true;
}
    }