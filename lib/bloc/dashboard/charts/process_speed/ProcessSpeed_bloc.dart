import 'dart:io';
import 'package:crm_task_manager/api/service/api_service.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/process_speed/ProcessSpeed_event.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/process_speed/ProcessSpeed_state.dart';
import 'package:crm_task_manager/models/dashboard_charts_models/process_speed%20_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'package:crm_task_manager/screens/dashboard/CACHE/process_speed_cache.dart';

class ProcessSpeedBloc extends Bloc<ProcessSpeedEvent, ProcessSpeedState> {
  final ApiService _apiService;

  ProcessSpeedBloc(this._apiService) : super(ProcessSpeedInitial()) {
    on<LoadProcessSpeedData>(_onLoadProcessSpeedData);
  }

  Future<bool> _checkInternetConnection() async {
    try {
      final result = await InternetAddress.lookup('example.com');
      return result.isNotEmpty && result[0].rawAddress.isNotEmpty;
    } on SocketException {
      return false;
    }
  }

  Future<void> _onLoadProcessSpeedData(
    LoadProcessSpeedData event,
    Emitter<ProcessSpeedState> emit,
  ) async {
    try {
      debugPrint("üïê –ù–∞—á–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
      emit(ProcessSpeedLoading());

      // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
      debugPrint("üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞...");
      final cachedSpeed = await ProcessSpeedCache.getProcessSpeedData();
      if (cachedSpeed != null) {
        debugPrint("üì¶ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ ProcceSpeed: $cachedSpeed");
        emit(ProcessSpeedLoaded(processSpeedData: ProcessSpeed(speed: cachedSpeed)));
      } else {
        debugPrint("‚ö†Ô∏è –ö—ç—à –ø—É—Å—Ç.");
      }

      // 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
      debugPrint("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
      if (await _checkInternetConnection()) {
        debugPrint("üì° –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...");
        final processSpeedData = await _apiService.getProcessSpeedData();

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (cachedSpeed == null || cachedSpeed != processSpeedData.speed) {
          debugPrint("üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${processSpeedData.speed}");
          await ProcessSpeedCache.saveProcessSpeedData(processSpeedData.speed);
          emit(ProcessSpeedLoaded(processSpeedData: processSpeedData));
        } else {
          debugPrint("üîÑ –°–ö–û–†–û–°–¢–¨ –û–ë–†–ê–ë–û–¢–ö–ò Admin –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
          emit(ProcessSpeedLoaded(processSpeedData: ProcessSpeed(speed: cachedSpeed)));
        }
      } else if (cachedSpeed == null) {
        debugPrint("‚ùå –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        emit(ProcessSpeedError(message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."));
      }
    } catch (e) {
      debugPrint("‚ùó –û—à–∏–±–∫–∞: $e");
      emit(ProcessSpeedError(message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"));
    }
  }
}
