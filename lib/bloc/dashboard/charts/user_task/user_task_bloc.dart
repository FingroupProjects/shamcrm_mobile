import 'dart:io';
import 'package:crm_task_manager/api/service/api_service.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/user_task/user_task_event.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/user_task/user_task_state.dart';
import 'package:crm_task_manager/models/dashboard_charts_models/user_task%20_model.dart';
import 'package:crm_task_manager/screens/dashboard/CACHE/users_chart_cache.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class TaskCompletionBloc extends Bloc<TaskCompletionEvent, TaskCompletionState> {
  final ApiService apiService;

  TaskCompletionBloc(this.apiService) : super(TaskCompletionInitial()) {
    on<LoadTaskCompletionData>(_onLoadTaskCompletionData);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  Future<bool> _checkInternetConnection() async {
    try {
      final result = await InternetAddress.lookup('example.com');
      return result.isNotEmpty && result[0].rawAddress.isNotEmpty;
    } on SocketException {
      return false;
    }
  }

  Future<void> _onLoadTaskCompletionData(
    LoadTaskCompletionData event,
    Emitter<TaskCompletionState> emit,
  ) async {
    try {
      emit(TaskCompletionLoading());

      // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
      List<UserTaskCompletion>? cachedData = await TaskCompletionCache.getTaskCompletionData();

      if (cachedData != null) {
        print("üì¶ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ: ${cachedData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
        emit(TaskCompletionLoaded(data: cachedData));
      }

      // 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
      if (await _checkInternetConnection()) {
        print("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...");

        final data = await apiService.getUsersChartData();

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (cachedData == null || !_areListsEqual(data, cachedData)) {
          print("‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ UI.");

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
          await TaskCompletionCache.saveTaskCompletionData(data);

          // –û–±–Ω–æ–≤–ª—è–µ–º UI
          emit(TaskCompletionLoaded(data: data));
        } else {
          print("üîÑ –í–´–ü–û–õ–ù–ï–ù–ò–ï –¶–ï–õ–ï–ô –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
        }
      } else {
        print("üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.");
        if (cachedData == null) {
          emit(TaskCompletionError(message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."));
        }
      }
    } catch (e) {
      print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $e");
      emit(TaskCompletionError(message: e.toString()));
    }
  }

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
  bool _areListsEqual(List<UserTaskCompletion> a, List<UserTaskCompletion> b) {
    if (a.length != b.length) return false;
    for (int i = 0; i < a.length; i++) {
      if (a[i].name != b[i].name || a[i].finishedTasksprocent != b[i].finishedTasksprocent) {
        return false;
      }
    }
    return true;
  }
}
