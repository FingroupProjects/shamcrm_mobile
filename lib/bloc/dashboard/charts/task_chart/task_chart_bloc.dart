
import 'dart:io';
import 'package:crm_task_manager/api/service/api_service.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/task_chart/task_chart_event.dart';
import 'package:crm_task_manager/bloc/dashboard/charts/task_chart/task_chart_state.dart';
import 'package:crm_task_manager/models/dashboard_charts_models/task_chart_model.dart';
import 'package:crm_task_manager/screens/dashboard/CACHE/task_chart_cache.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class DashboardTaskChartBloc
    extends Bloc<DashboardTaskChartEvent, DashboardTaskChartState> {
  final ApiService _apiService;

  DashboardTaskChartBloc(this._apiService)
      : super(DashboardTaskChartInitial()) {
    on<LoadTaskChartData>(_onLoadTaskChartData);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  Future<bool> _checkInternetConnection() async {
    try {
      final result = await InternetAddress.lookup('example.com');
      return result.isNotEmpty && result[0].rawAddress.isNotEmpty;
    } on SocketException {
      return false;
    }
  }

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  bool _areListsEqual(List<double> a, List<double> b) {
    if (a.length != b.length) return false; // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–æ–≤
    for (int i = 0; i < a.length; i++) {
      if (a[i] != b[i]) return false; // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    }
    return true;
  }

  Future<void> _onLoadTaskChartData(
    LoadTaskChartData event,
    Emitter<DashboardTaskChartState> emit,
  ) async {
    try {
      print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä–∞—Ñ–∏–∫–µ –∑–∞–¥–∞—á...");
      emit(DashboardTaskChartLoading());

      // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
      List<double>? cachedData = await TaskChartCacheHandler.getTaskChartData();
      if (cachedData != null) {
        print("üì¶ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ.");
        emit(DashboardTaskChartLoaded(taskChartData: TaskChart(data: cachedData)));
      }

      // 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
      if (await _checkInternetConnection()) {
        print("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...");

        final taskChartData = await _apiService.getTaskChartData();

        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ UI
        if (cachedData == null || !_areListsEqual(taskChartData.data, cachedData)) {
          print("‚úÖ –ó–ê–î–ê–ß–ò –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ UI.");

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
          await TaskChartCacheHandler.saveTaskChartData(taskChartData.data);

          // –û–±–Ω–æ–≤–ª—è–µ–º UI
          emit(DashboardTaskChartLoaded(taskChartData: taskChartData));
        } else {
          print("üîÑ –ó–ê–î–ê–ß–ò –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
        }
      } else {
        print("üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.");
        if (cachedData == null) {
          emit(DashboardTaskChartError(message: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."));
        }
      }
    } catch (e) {
      print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $e");
      emit(DashboardTaskChartError(message: e.toString()));
    }
  }
}
