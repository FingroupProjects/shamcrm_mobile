import 'dart:io';
import 'package:bloc/bloc.dart';
import 'package:crm_task_manager/api/service/api_service.dart';
import 'package:crm_task_manager/bloc/notifications/notifications_event.dart';
import 'package:crm_task_manager/bloc/notifications/notifications_state.dart';
import 'package:crm_task_manager/models/notifications_model.dart';
import 'package:crm_task_manager/notification_cache.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class NotificationBloc extends Bloc<NotificationEvent, NotificationState> {
  final ApiService apiService;
  bool allNotificationsFetched = false;

  NotificationBloc(this.apiService) : super(NotificationInitial()) {
    on<FetchNotifications>(_fetchNotifications);
    on<FetchMoreNotifications>(_fetchMoreNotifications);
    on<DeleteNotification>(_deleteNotification);
    on<DeleteAllNotification>(_deleteAllNotification); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
  }

  Future<bool> _checkInternetConnection() async {
    try {
      final result = await InternetAddress.lookup('example.com');
      return result.isNotEmpty && result[0].rawAddress.isNotEmpty;
    } on SocketException {
      return false;
    }
  }
  Future<void> _fetchMoreNotifications(FetchMoreNotifications event, Emitter<NotificationState> emit) async {
    if (allNotificationsFetched) return;

    if (await _checkInternetConnection()) {
      try {
        final notifications = await apiService.getAllNotifications(page: event.currentPage + 1);
        if (notifications.isEmpty) {
          allNotificationsFetched = true;
          return;
        }
        if (state is NotificationDataLoaded) {
          final currentState = state as NotificationDataLoaded;
          final updatedNotifications = List<Notifications>.from(currentState.notifications)
            ..addAll(notifications);
          emit(NotificationDataLoaded(updatedNotifications, currentPage: event.currentPage + 1));
        }
      } catch (e) {
        emit(NotificationError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!'));
      }
    } else {
      emit(NotificationError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'));
    }
  }

Future<void> _fetchNotifications(FetchNotifications event, Emitter<NotificationState> emit) async {
  print("üì• [FETCH] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
  emit(NotificationLoading());

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
  final cachedNotifications = await NotificationCacheHandler.getNotifications();
  if (cachedNotifications != null && cachedNotifications.isNotEmpty) {
    print("üì¶ [CACHE] –ù–∞–π–¥–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫—ç—à–µ: ${cachedNotifications.length} —à—Ç.");
    emit(NotificationDataLoaded(cachedNotifications, currentPage: 1));
  } else {
    print("‚ö†Ô∏è [CACHE] –î–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    emit(NotificationDataLoaded([], currentPage: 1)); 
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  if (await _checkInternetConnection()) {
    print("üåê [NETWORK] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –ó–∞–≥—Ä—É–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞...");
    try {
      final notifications = await apiService.getAllNotifications(page: 1, perPage: 20);

      if (notifications.isNotEmpty) {
        print("‚úÖ [SERVER] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifications.length} —à—Ç.");
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
        await NotificationCacheHandler.saveNotifications(notifications);
        print("üíæ [CACHE] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à.");
        emit(NotificationDataLoaded(notifications, currentPage: 1));
      } else {
        print("‚ö†Ô∏è [SERVER] –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
        // –û—á–∏—â–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        await NotificationCacheHandler.clearCache();
        emit(NotificationDataLoaded([], currentPage: 1)); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    } catch (e) {
      print("‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!");
      emit(NotificationError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!'));
    }
  } else if (cachedNotifications == null || cachedNotifications.isEmpty) {
    print("üö´ [OFFLINE] –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ.");
    emit(NotificationError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ'));
  }
}


Future<void> _deleteAllNotification(DeleteAllNotification event, Emitter<NotificationState> emit) async {
  print("üóëÔ∏è [DELETE ALL] –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
  if (await _checkInternetConnection()) {
    print("üåê [NETWORK] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
    try {
      await apiService.DeleteAllNotifications();
      print("‚úÖ [SERVER] –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.");

      // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
      await NotificationCacheHandler.clearCache();
      print("üíæ [CACHE] –ö—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω.");
      emit(NotificationDeleted('–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã'));
    } catch (e) {
      print("‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!");
      emit(NotificationError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'));
    }
  } else {
    print("üö´ [OFFLINE] –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
    emit(NotificationError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'));
  }
}

Future<void> _deleteNotification(DeleteNotification event, Emitter<NotificationState> emit) async {
  print("üóëÔ∏è [DELETE] –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å ID: ${event.notificationId}...");
  if (await _checkInternetConnection()) {
    print("üåê [NETWORK] –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
    try {
      await apiService.DeleteNotifications(notificationId: event.notificationId);
      print("‚úÖ [SERVER] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID: ${event.notificationId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.");

      if (state is NotificationDataLoaded) {
        final currentState = state as NotificationDataLoaded;

        final updatedNotifications = currentState.notifications
            .where((notification) => notification.id != event.notificationId)
            .toList();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        await NotificationCacheHandler.saveNotifications(updatedNotifications);
        print("üíæ [CACHE] –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");

        emit(NotificationDataLoaded(updatedNotifications, currentPage: currentState.currentPage));
      }
    } catch (e) {
      print("‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e");
      emit(NotificationError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!'));
    }
  } else {
    print("üö´ [OFFLINE] –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
    emit(NotificationError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'));
  }
}
}
